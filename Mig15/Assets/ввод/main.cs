//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/ввод/main.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Main: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Main()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""main"",
    ""maps"": [
        {
            ""name"": ""gamePlain"",
            ""id"": ""72c086db-750b-4152-bca7-c8137a3718dd"",
            ""actions"": [
                {
                    ""name"": ""mouve"",
                    ""type"": ""Value"",
                    ""id"": ""8f0a3c82-c246-46f4-85d8-54ffb419f3ea"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SmallShout"",
                    ""type"": ""Button"",
                    ""id"": ""7c4c48ac-f8df-4bc7-a53c-5382b676a740"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BigShout"",
                    ""type"": ""Button"",
                    ""id"": ""0455d861-1b93-492d-a076-ecf2c8e951a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""05772a24-9c3b-4613-9fe0-bd074f0bda60"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouve"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""04a10279-797b-4b4d-9b53-bd722b6992cc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouve"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""62fe5f93-50a6-4751-98d4-a5b85d57b8cc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouve"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""dea53273-6846-4092-ba77-6060934b5c1c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SmallShout"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7f6e606-380b-41c9-b4ba-1f296cd68934"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BigShout"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // gamePlain
        m_gamePlain = asset.FindActionMap("gamePlain", throwIfNotFound: true);
        m_gamePlain_mouve = m_gamePlain.FindAction("mouve", throwIfNotFound: true);
        m_gamePlain_SmallShout = m_gamePlain.FindAction("SmallShout", throwIfNotFound: true);
        m_gamePlain_BigShout = m_gamePlain.FindAction("BigShout", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // gamePlain
    private readonly InputActionMap m_gamePlain;
    private List<IGamePlainActions> m_GamePlainActionsCallbackInterfaces = new List<IGamePlainActions>();
    private readonly InputAction m_gamePlain_mouve;
    private readonly InputAction m_gamePlain_SmallShout;
    private readonly InputAction m_gamePlain_BigShout;
    public struct GamePlainActions
    {
        private @Main m_Wrapper;
        public GamePlainActions(@Main wrapper) { m_Wrapper = wrapper; }
        public InputAction @mouve => m_Wrapper.m_gamePlain_mouve;
        public InputAction @SmallShout => m_Wrapper.m_gamePlain_SmallShout;
        public InputAction @BigShout => m_Wrapper.m_gamePlain_BigShout;
        public InputActionMap Get() { return m_Wrapper.m_gamePlain; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlainActions set) { return set.Get(); }
        public void AddCallbacks(IGamePlainActions instance)
        {
            if (instance == null || m_Wrapper.m_GamePlainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamePlainActionsCallbackInterfaces.Add(instance);
            @mouve.started += instance.OnMouve;
            @mouve.performed += instance.OnMouve;
            @mouve.canceled += instance.OnMouve;
            @SmallShout.started += instance.OnSmallShout;
            @SmallShout.performed += instance.OnSmallShout;
            @SmallShout.canceled += instance.OnSmallShout;
            @BigShout.started += instance.OnBigShout;
            @BigShout.performed += instance.OnBigShout;
            @BigShout.canceled += instance.OnBigShout;
        }

        private void UnregisterCallbacks(IGamePlainActions instance)
        {
            @mouve.started -= instance.OnMouve;
            @mouve.performed -= instance.OnMouve;
            @mouve.canceled -= instance.OnMouve;
            @SmallShout.started -= instance.OnSmallShout;
            @SmallShout.performed -= instance.OnSmallShout;
            @SmallShout.canceled -= instance.OnSmallShout;
            @BigShout.started -= instance.OnBigShout;
            @BigShout.performed -= instance.OnBigShout;
            @BigShout.canceled -= instance.OnBigShout;
        }

        public void RemoveCallbacks(IGamePlainActions instance)
        {
            if (m_Wrapper.m_GamePlainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamePlainActions instance)
        {
            foreach (var item in m_Wrapper.m_GamePlainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamePlainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamePlainActions @gamePlain => new GamePlainActions(this);
    public interface IGamePlainActions
    {
        void OnMouve(InputAction.CallbackContext context);
        void OnSmallShout(InputAction.CallbackContext context);
        void OnBigShout(InputAction.CallbackContext context);
    }
}
